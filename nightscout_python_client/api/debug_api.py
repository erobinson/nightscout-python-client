# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nightscout_python_client.api_client import ApiClient


class DebugApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def echo_storage_spec_get(self, storage, spec, **kwargs):  # noqa: E501
        """View generated Mongo Query object  # noqa: E501

        Information about the mongo query object created by the query.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.echo_storage_spec_get(storage, spec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage: `entries`, or `treatments` to select the storage layer.  (required)
        :param str spec: entry id, such as `55cf81bc436037528ec75fa5` or a type filter such as `sgv`, `mbg`, etc. This parameter is optional.  (required)
        :param str find: The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings. 
        :param float count: Number of entries to return.
        :return: MongoQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.echo_storage_spec_get_with_http_info(storage, spec, **kwargs)  # noqa: E501
        else:
            (data) = self.echo_storage_spec_get_with_http_info(storage, spec, **kwargs)  # noqa: E501
            return data

    def echo_storage_spec_get_with_http_info(self, storage, spec, **kwargs):  # noqa: E501
        """View generated Mongo Query object  # noqa: E501

        Information about the mongo query object created by the query.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.echo_storage_spec_get_with_http_info(storage, spec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str storage: `entries`, or `treatments` to select the storage layer.  (required)
        :param str spec: entry id, such as `55cf81bc436037528ec75fa5` or a type filter such as `sgv`, `mbg`, etc. This parameter is optional.  (required)
        :param str find: The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings. 
        :param float count: Number of entries to return.
        :return: MongoQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage', 'spec', 'find', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method echo_storage_spec_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage' is set
        if ('storage' not in params or
                params['storage'] is None):
            raise ValueError("Missing the required parameter `storage` when calling `echo_storage_spec_get`")  # noqa: E501
        # verify the required parameter 'spec' is set
        if ('spec' not in params or
                params['spec'] is None):
            raise ValueError("Missing the required parameter `spec` when calling `echo_storage_spec_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage' in params:
            path_params['storage'] = params['storage']  # noqa: E501
        if 'spec' in params:
            path_params['spec'] = params['spec']  # noqa: E501

        query_params = []
        if 'find' in params:
            query_params.append(('find', params['find']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_secret', 'jwtoken', 'token_in_url']  # noqa: E501

        return self.api_client.call_api(
            '/echo/{storage}/{spec}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MongoQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def times_echo_prefix_regex_get(self, prefix, regex, **kwargs):  # noqa: E501
        """Echo the query object to be used.  # noqa: E501

        Echo debug information about the query object constructed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.times_echo_prefix_regex_get(prefix, regex, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: Prefix to use in constructing a prefix-based regex. (required)
        :param str regex: Tail part of regexp to use in expanding/construccting a query object. Regexp also has bash-style brace and glob expansion applied to it, creating ways to search for modal times of day, perhaps using something like this syntax: `T{15..17}:.*`, this would search for all records from 3pm to 5pm.  (required)
        :param str find: The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.
        :param float count: Number of entries to return.
        :return: MongoQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.times_echo_prefix_regex_get_with_http_info(prefix, regex, **kwargs)  # noqa: E501
        else:
            (data) = self.times_echo_prefix_regex_get_with_http_info(prefix, regex, **kwargs)  # noqa: E501
            return data

    def times_echo_prefix_regex_get_with_http_info(self, prefix, regex, **kwargs):  # noqa: E501
        """Echo the query object to be used.  # noqa: E501

        Echo debug information about the query object constructed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.times_echo_prefix_regex_get_with_http_info(prefix, regex, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: Prefix to use in constructing a prefix-based regex. (required)
        :param str regex: Tail part of regexp to use in expanding/construccting a query object. Regexp also has bash-style brace and glob expansion applied to it, creating ways to search for modal times of day, perhaps using something like this syntax: `T{15..17}:.*`, this would search for all records from 3pm to 5pm.  (required)
        :param str find: The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.
        :param float count: Number of entries to return.
        :return: MongoQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix', 'regex', 'find', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method times_echo_prefix_regex_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefix' is set
        if ('prefix' not in params or
                params['prefix'] is None):
            raise ValueError("Missing the required parameter `prefix` when calling `times_echo_prefix_regex_get`")  # noqa: E501
        # verify the required parameter 'regex' is set
        if ('regex' not in params or
                params['regex'] is None):
            raise ValueError("Missing the required parameter `regex` when calling `times_echo_prefix_regex_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prefix' in params:
            path_params['prefix'] = params['prefix']  # noqa: E501
        if 'regex' in params:
            path_params['regex'] = params['regex']  # noqa: E501

        query_params = []
        if 'find' in params:
            query_params.append(('find', params['find']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_secret', 'jwtoken', 'token_in_url']  # noqa: E501

        return self.api_client.call_api(
            '/times/echo/{prefix}/{regex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MongoQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
