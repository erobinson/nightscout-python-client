# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pump(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clock': 'str',
        'battery': 'Pumpbattery',
        'reservoir': 'float',
        'status': 'Pumpstatus'
    }

    attribute_map = {
        'clock': 'clock',
        'battery': 'battery',
        'reservoir': 'reservoir',
        'status': 'status'
    }

    def __init__(self, clock=None, battery=None, reservoir=None, status=None):  # noqa: E501
        """Pump - a model defined in Swagger"""  # noqa: E501
        self._clock = None
        self._battery = None
        self._reservoir = None
        self._status = None
        self.discriminator = None
        if clock is not None:
            self.clock = clock
        if battery is not None:
            self.battery = battery
        if reservoir is not None:
            self.reservoir = reservoir
        if status is not None:
            self.status = status

    @property
    def clock(self):
        """Gets the clock of this Pump.  # noqa: E501

        dateString, prefer ISO `8601`  # noqa: E501

        :return: The clock of this Pump.  # noqa: E501
        :rtype: str
        """
        return self._clock

    @clock.setter
    def clock(self, clock):
        """Sets the clock of this Pump.

        dateString, prefer ISO `8601`  # noqa: E501

        :param clock: The clock of this Pump.  # noqa: E501
        :type: str
        """

        self._clock = clock

    @property
    def battery(self):
        """Gets the battery of this Pump.  # noqa: E501


        :return: The battery of this Pump.  # noqa: E501
        :rtype: Pumpbattery
        """
        return self._battery

    @battery.setter
    def battery(self, battery):
        """Sets the battery of this Pump.


        :param battery: The battery of this Pump.  # noqa: E501
        :type: Pumpbattery
        """

        self._battery = battery

    @property
    def reservoir(self):
        """Gets the reservoir of this Pump.  # noqa: E501

        Amount of insulin remaining in pump reservoir  # noqa: E501

        :return: The reservoir of this Pump.  # noqa: E501
        :rtype: float
        """
        return self._reservoir

    @reservoir.setter
    def reservoir(self, reservoir):
        """Sets the reservoir of this Pump.

        Amount of insulin remaining in pump reservoir  # noqa: E501

        :param reservoir: The reservoir of this Pump.  # noqa: E501
        :type: float
        """

        self._reservoir = reservoir

    @property
    def status(self):
        """Gets the status of this Pump.  # noqa: E501


        :return: The status of this Pump.  # noqa: E501
        :rtype: Pumpstatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Pump.


        :param status: The status of this Pump.  # noqa: E501
        :type: Pumpstatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pump, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pump):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
