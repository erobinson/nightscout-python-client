# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Entry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'date_string': 'str',
        '_date': 'float',
        'sgv': 'float',
        'direction': 'str',
        'noise': 'float',
        'filtered': 'float',
        'unfiltered': 'float',
        'rssi': 'float'
    }

    attribute_map = {
        'type': 'type',
        'date_string': 'dateString',
        '_date': 'date',
        'sgv': 'sgv',
        'direction': 'direction',
        'noise': 'noise',
        'filtered': 'filtered',
        'unfiltered': 'unfiltered',
        'rssi': 'rssi'
    }

    def __init__(self, type=None, date_string=None, _date=None, sgv=None, direction=None, noise=None, filtered=None, unfiltered=None, rssi=None):  # noqa: E501
        """Entry - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._date_string = None
        self.__date = None
        self._sgv = None
        self._direction = None
        self._noise = None
        self._filtered = None
        self._unfiltered = None
        self._rssi = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if date_string is not None:
            self.date_string = date_string
        if _date is not None:
            self._date = _date
        if sgv is not None:
            self.sgv = sgv
        if direction is not None:
            self.direction = direction
        if noise is not None:
            self.noise = noise
        if filtered is not None:
            self.filtered = filtered
        if unfiltered is not None:
            self.unfiltered = unfiltered
        if rssi is not None:
            self.rssi = rssi

    @property
    def type(self):
        """Gets the type of this Entry.  # noqa: E501

        sgv, mbg, cal, etc  # noqa: E501

        :return: The type of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entry.

        sgv, mbg, cal, etc  # noqa: E501

        :param type: The type of this Entry.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def date_string(self):
        """Gets the date_string of this Entry.  # noqa: E501

        dateString, MUST be ISO `8601` format date parseable by Javascript Date()  # noqa: E501

        :return: The date_string of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._date_string

    @date_string.setter
    def date_string(self, date_string):
        """Sets the date_string of this Entry.

        dateString, MUST be ISO `8601` format date parseable by Javascript Date()  # noqa: E501

        :param date_string: The date_string of this Entry.  # noqa: E501
        :type: str
        """

        self._date_string = date_string

    @property
    def _date(self):
        """Gets the _date of this Entry.  # noqa: E501

        Epoch  # noqa: E501

        :return: The _date of this Entry.  # noqa: E501
        :rtype: float
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Entry.

        Epoch  # noqa: E501

        :param _date: The _date of this Entry.  # noqa: E501
        :type: float
        """

        self.__date = _date

    @property
    def sgv(self):
        """Gets the sgv of this Entry.  # noqa: E501

        The glucose reading. (only available for sgv types)  # noqa: E501

        :return: The sgv of this Entry.  # noqa: E501
        :rtype: float
        """
        return self._sgv

    @sgv.setter
    def sgv(self, sgv):
        """Sets the sgv of this Entry.

        The glucose reading. (only available for sgv types)  # noqa: E501

        :param sgv: The sgv of this Entry.  # noqa: E501
        :type: float
        """

        self._sgv = sgv

    @property
    def direction(self):
        """Gets the direction of this Entry.  # noqa: E501

        Direction of glucose trend reported by CGM. (only available for sgv types)  # noqa: E501

        :return: The direction of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Entry.

        Direction of glucose trend reported by CGM. (only available for sgv types)  # noqa: E501

        :param direction: The direction of this Entry.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def noise(self):
        """Gets the noise of this Entry.  # noqa: E501

        Noise level at time of reading. (only available for sgv types)  # noqa: E501

        :return: The noise of this Entry.  # noqa: E501
        :rtype: float
        """
        return self._noise

    @noise.setter
    def noise(self, noise):
        """Sets the noise of this Entry.

        Noise level at time of reading. (only available for sgv types)  # noqa: E501

        :param noise: The noise of this Entry.  # noqa: E501
        :type: float
        """

        self._noise = noise

    @property
    def filtered(self):
        """Gets the filtered of this Entry.  # noqa: E501

        The raw filtered value directly from CGM transmitter. (only available for sgv types)  # noqa: E501

        :return: The filtered of this Entry.  # noqa: E501
        :rtype: float
        """
        return self._filtered

    @filtered.setter
    def filtered(self, filtered):
        """Sets the filtered of this Entry.

        The raw filtered value directly from CGM transmitter. (only available for sgv types)  # noqa: E501

        :param filtered: The filtered of this Entry.  # noqa: E501
        :type: float
        """

        self._filtered = filtered

    @property
    def unfiltered(self):
        """Gets the unfiltered of this Entry.  # noqa: E501

        The raw unfiltered value directly from CGM transmitter. (only available for sgv types)  # noqa: E501

        :return: The unfiltered of this Entry.  # noqa: E501
        :rtype: float
        """
        return self._unfiltered

    @unfiltered.setter
    def unfiltered(self, unfiltered):
        """Sets the unfiltered of this Entry.

        The raw unfiltered value directly from CGM transmitter. (only available for sgv types)  # noqa: E501

        :param unfiltered: The unfiltered of this Entry.  # noqa: E501
        :type: float
        """

        self._unfiltered = unfiltered

    @property
    def rssi(self):
        """Gets the rssi of this Entry.  # noqa: E501

        The signal strength from CGM transmitter. (only available for sgv types)  # noqa: E501

        :return: The rssi of this Entry.  # noqa: E501
        :rtype: float
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this Entry.

        The signal strength from CGM transmitter. (only available for sgv types)  # noqa: E501

        :param rssi: The rssi of this Entry.  # noqa: E501
        :type: float
        """

        self._rssi = rssi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
