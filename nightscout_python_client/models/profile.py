# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sens': 'int',
        'dia': 'int',
        'carbratio': 'int',
        'carbs_hr': 'int',
        'id': 'str'
    }

    attribute_map = {
        'sens': 'sens',
        'dia': 'dia',
        'carbratio': 'carbratio',
        'carbs_hr': 'carbs_hr',
        'id': '_id'
    }

    def __init__(self, sens=None, dia=None, carbratio=None, carbs_hr=None, id=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        self._sens = None
        self._dia = None
        self._carbratio = None
        self._carbs_hr = None
        self._id = None
        self.discriminator = None
        if sens is not None:
            self.sens = sens
        if dia is not None:
            self.dia = dia
        if carbratio is not None:
            self.carbratio = carbratio
        if carbs_hr is not None:
            self.carbs_hr = carbs_hr
        if id is not None:
            self.id = id

    @property
    def sens(self):
        """Gets the sens of this Profile.  # noqa: E501

        Internally assigned id  # noqa: E501

        :return: The sens of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._sens

    @sens.setter
    def sens(self, sens):
        """Sets the sens of this Profile.

        Internally assigned id  # noqa: E501

        :param sens: The sens of this Profile.  # noqa: E501
        :type: int
        """

        self._sens = sens

    @property
    def dia(self):
        """Gets the dia of this Profile.  # noqa: E501

        Internally assigned id  # noqa: E501

        :return: The dia of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._dia

    @dia.setter
    def dia(self, dia):
        """Sets the dia of this Profile.

        Internally assigned id  # noqa: E501

        :param dia: The dia of this Profile.  # noqa: E501
        :type: int
        """

        self._dia = dia

    @property
    def carbratio(self):
        """Gets the carbratio of this Profile.  # noqa: E501

        Internally assigned id  # noqa: E501

        :return: The carbratio of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._carbratio

    @carbratio.setter
    def carbratio(self, carbratio):
        """Sets the carbratio of this Profile.

        Internally assigned id  # noqa: E501

        :param carbratio: The carbratio of this Profile.  # noqa: E501
        :type: int
        """

        self._carbratio = carbratio

    @property
    def carbs_hr(self):
        """Gets the carbs_hr of this Profile.  # noqa: E501

        Internally assigned id  # noqa: E501

        :return: The carbs_hr of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._carbs_hr

    @carbs_hr.setter
    def carbs_hr(self, carbs_hr):
        """Sets the carbs_hr of this Profile.

        Internally assigned id  # noqa: E501

        :param carbs_hr: The carbs_hr of this Profile.  # noqa: E501
        :type: int
        """

        self._carbs_hr = carbs_hr

    @property
    def id(self):
        """Gets the id of this Profile.  # noqa: E501

        Internally assigned id  # noqa: E501

        :return: The id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Profile.

        Internally assigned id  # noqa: E501

        :param id: The id of this Profile.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
