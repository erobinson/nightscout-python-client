# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Treatment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'event_type': 'str',
        'created_at': 'str',
        'glucose': 'str',
        'glucose_type': 'str',
        'carbs': 'float',
        'protein': 'float',
        'fat': 'float',
        'insulin': 'float',
        'units': 'str',
        'transmitter_id': 'str',
        'sensor_code': 'str',
        'notes': 'str',
        'entered_by': 'str'
    }

    attribute_map = {
        'id': '_id',
        'event_type': 'eventType',
        'created_at': 'created_at',
        'glucose': 'glucose',
        'glucose_type': 'glucoseType',
        'carbs': 'carbs',
        'protein': 'protein',
        'fat': 'fat',
        'insulin': 'insulin',
        'units': 'units',
        'transmitter_id': 'transmitterId',
        'sensor_code': 'sensorCode',
        'notes': 'notes',
        'entered_by': 'enteredBy'
    }

    def __init__(self, id=None, event_type=None, created_at=None, glucose=None, glucose_type=None, carbs=None, protein=None, fat=None, insulin=None, units=None, transmitter_id=None, sensor_code=None, notes=None, entered_by=None):  # noqa: E501
        """Treatment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._event_type = None
        self._created_at = None
        self._glucose = None
        self._glucose_type = None
        self._carbs = None
        self._protein = None
        self._fat = None
        self._insulin = None
        self._units = None
        self._transmitter_id = None
        self._sensor_code = None
        self._notes = None
        self._entered_by = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if event_type is not None:
            self.event_type = event_type
        if created_at is not None:
            self.created_at = created_at
        if glucose is not None:
            self.glucose = glucose
        if glucose_type is not None:
            self.glucose_type = glucose_type
        if carbs is not None:
            self.carbs = carbs
        if protein is not None:
            self.protein = protein
        if fat is not None:
            self.fat = fat
        if insulin is not None:
            self.insulin = insulin
        if units is not None:
            self.units = units
        if transmitter_id is not None:
            self.transmitter_id = transmitter_id
        if sensor_code is not None:
            self.sensor_code = sensor_code
        if notes is not None:
            self.notes = notes
        if entered_by is not None:
            self.entered_by = entered_by

    @property
    def id(self):
        """Gets the id of this Treatment.  # noqa: E501

        Internally assigned id.  # noqa: E501

        :return: The id of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Treatment.

        Internally assigned id.  # noqa: E501

        :param id: The id of this Treatment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def event_type(self):
        """Gets the event_type of this Treatment.  # noqa: E501

        The type of treatment event.  # noqa: E501

        :return: The event_type of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Treatment.

        The type of treatment event.  # noqa: E501

        :param event_type: The event_type of this Treatment.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def created_at(self):
        """Gets the created_at of this Treatment.  # noqa: E501

        The date of the event, might be set retroactively .  # noqa: E501

        :return: The created_at of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Treatment.

        The date of the event, might be set retroactively .  # noqa: E501

        :param created_at: The created_at of this Treatment.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def glucose(self):
        """Gets the glucose of this Treatment.  # noqa: E501

        Current glucose.  # noqa: E501

        :return: The glucose of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._glucose

    @glucose.setter
    def glucose(self, glucose):
        """Sets the glucose of this Treatment.

        Current glucose.  # noqa: E501

        :param glucose: The glucose of this Treatment.  # noqa: E501
        :type: str
        """

        self._glucose = glucose

    @property
    def glucose_type(self):
        """Gets the glucose_type of this Treatment.  # noqa: E501

        Method used to obtain glucose, Finger or Sensor.  # noqa: E501

        :return: The glucose_type of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._glucose_type

    @glucose_type.setter
    def glucose_type(self, glucose_type):
        """Sets the glucose_type of this Treatment.

        Method used to obtain glucose, Finger or Sensor.  # noqa: E501

        :param glucose_type: The glucose_type of this Treatment.  # noqa: E501
        :type: str
        """

        self._glucose_type = glucose_type

    @property
    def carbs(self):
        """Gets the carbs of this Treatment.  # noqa: E501

         Amount of carbs consumed in grams.  # noqa: E501

        :return: The carbs of this Treatment.  # noqa: E501
        :rtype: float
        """
        return self._carbs

    @carbs.setter
    def carbs(self, carbs):
        """Sets the carbs of this Treatment.

         Amount of carbs consumed in grams.  # noqa: E501

        :param carbs: The carbs of this Treatment.  # noqa: E501
        :type: float
        """

        self._carbs = carbs

    @property
    def protein(self):
        """Gets the protein of this Treatment.  # noqa: E501

         Amount of protein consumed in grams.  # noqa: E501

        :return: The protein of this Treatment.  # noqa: E501
        :rtype: float
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this Treatment.

         Amount of protein consumed in grams.  # noqa: E501

        :param protein: The protein of this Treatment.  # noqa: E501
        :type: float
        """

        self._protein = protein

    @property
    def fat(self):
        """Gets the fat of this Treatment.  # noqa: E501

         Amount of fat consumed in grams.  # noqa: E501

        :return: The fat of this Treatment.  # noqa: E501
        :rtype: float
        """
        return self._fat

    @fat.setter
    def fat(self, fat):
        """Sets the fat of this Treatment.

         Amount of fat consumed in grams.  # noqa: E501

        :param fat: The fat of this Treatment.  # noqa: E501
        :type: float
        """

        self._fat = fat

    @property
    def insulin(self):
        """Gets the insulin of this Treatment.  # noqa: E501

        Amount of insulin, if any.  # noqa: E501

        :return: The insulin of this Treatment.  # noqa: E501
        :rtype: float
        """
        return self._insulin

    @insulin.setter
    def insulin(self, insulin):
        """Sets the insulin of this Treatment.

        Amount of insulin, if any.  # noqa: E501

        :param insulin: The insulin of this Treatment.  # noqa: E501
        :type: float
        """

        self._insulin = insulin

    @property
    def units(self):
        """Gets the units of this Treatment.  # noqa: E501

        The units for the glucose value, mg/dl or mmol.  # noqa: E501

        :return: The units of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Treatment.

        The units for the glucose value, mg/dl or mmol.  # noqa: E501

        :param units: The units of this Treatment.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def transmitter_id(self):
        """Gets the transmitter_id of this Treatment.  # noqa: E501

        The transmitter ID of the transmitter being started.  # noqa: E501

        :return: The transmitter_id of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._transmitter_id

    @transmitter_id.setter
    def transmitter_id(self, transmitter_id):
        """Sets the transmitter_id of this Treatment.

        The transmitter ID of the transmitter being started.  # noqa: E501

        :param transmitter_id: The transmitter_id of this Treatment.  # noqa: E501
        :type: str
        """

        self._transmitter_id = transmitter_id

    @property
    def sensor_code(self):
        """Gets the sensor_code of this Treatment.  # noqa: E501

        The code used to start a Dexcom G6 sensor.  # noqa: E501

        :return: The sensor_code of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._sensor_code

    @sensor_code.setter
    def sensor_code(self, sensor_code):
        """Sets the sensor_code of this Treatment.

        The code used to start a Dexcom G6 sensor.  # noqa: E501

        :param sensor_code: The sensor_code of this Treatment.  # noqa: E501
        :type: str
        """

        self._sensor_code = sensor_code

    @property
    def notes(self):
        """Gets the notes of this Treatment.  # noqa: E501

        Description/notes of treatment.  # noqa: E501

        :return: The notes of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Treatment.

        Description/notes of treatment.  # noqa: E501

        :param notes: The notes of this Treatment.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def entered_by(self):
        """Gets the entered_by of this Treatment.  # noqa: E501

        Who entered the treatment.  # noqa: E501

        :return: The entered_by of this Treatment.  # noqa: E501
        :rtype: str
        """
        return self._entered_by

    @entered_by.setter
    def entered_by(self, entered_by):
        """Sets the entered_by of this Treatment.

        Who entered the treatment.  # noqa: E501

        :param entered_by: The entered_by of this Treatment.  # noqa: E501
        :type: str
        """

        self._entered_by = entered_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Treatment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Treatment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
