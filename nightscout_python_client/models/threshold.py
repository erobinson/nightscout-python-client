# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Threshold(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bg_high': 'int',
        'bg_target_top': 'int',
        'bg_target_bottom': 'int',
        'bg_low': 'int'
    }

    attribute_map = {
        'bg_high': 'bg_high',
        'bg_target_top': 'bg_target_top',
        'bg_target_bottom': 'bg_target_bottom',
        'bg_low': 'bg_low'
    }

    def __init__(self, bg_high=None, bg_target_top=None, bg_target_bottom=None, bg_low=None):  # noqa: E501
        """Threshold - a model defined in Swagger"""  # noqa: E501
        self._bg_high = None
        self._bg_target_top = None
        self._bg_target_bottom = None
        self._bg_low = None
        self.discriminator = None
        if bg_high is not None:
            self.bg_high = bg_high
        if bg_target_top is not None:
            self.bg_target_top = bg_target_top
        if bg_target_bottom is not None:
            self.bg_target_bottom = bg_target_bottom
        if bg_low is not None:
            self.bg_low = bg_low

    @property
    def bg_high(self):
        """Gets the bg_high of this Threshold.  # noqa: E501

        High BG range.  # noqa: E501

        :return: The bg_high of this Threshold.  # noqa: E501
        :rtype: int
        """
        return self._bg_high

    @bg_high.setter
    def bg_high(self, bg_high):
        """Sets the bg_high of this Threshold.

        High BG range.  # noqa: E501

        :param bg_high: The bg_high of this Threshold.  # noqa: E501
        :type: int
        """

        self._bg_high = bg_high

    @property
    def bg_target_top(self):
        """Gets the bg_target_top of this Threshold.  # noqa: E501

        Top of target range.  # noqa: E501

        :return: The bg_target_top of this Threshold.  # noqa: E501
        :rtype: int
        """
        return self._bg_target_top

    @bg_target_top.setter
    def bg_target_top(self, bg_target_top):
        """Sets the bg_target_top of this Threshold.

        Top of target range.  # noqa: E501

        :param bg_target_top: The bg_target_top of this Threshold.  # noqa: E501
        :type: int
        """

        self._bg_target_top = bg_target_top

    @property
    def bg_target_bottom(self):
        """Gets the bg_target_bottom of this Threshold.  # noqa: E501

        Bottom of target range.  # noqa: E501

        :return: The bg_target_bottom of this Threshold.  # noqa: E501
        :rtype: int
        """
        return self._bg_target_bottom

    @bg_target_bottom.setter
    def bg_target_bottom(self, bg_target_bottom):
        """Sets the bg_target_bottom of this Threshold.

        Bottom of target range.  # noqa: E501

        :param bg_target_bottom: The bg_target_bottom of this Threshold.  # noqa: E501
        :type: int
        """

        self._bg_target_bottom = bg_target_bottom

    @property
    def bg_low(self):
        """Gets the bg_low of this Threshold.  # noqa: E501

        Low BG range.  # noqa: E501

        :return: The bg_low of this Threshold.  # noqa: E501
        :rtype: int
        """
        return self._bg_low

    @bg_low.setter
    def bg_low(self, bg_low):
        """Sets the bg_low of this Threshold.

        Low BG range.  # noqa: E501

        :param bg_low: The bg_low of this Threshold.  # noqa: E501
        :type: int
        """

        self._bg_low = bg_low

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Threshold, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Threshold):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
