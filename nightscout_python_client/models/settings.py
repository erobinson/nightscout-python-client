# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Settings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'units': 'str',
        'time_format': 'str',
        'custom_title': 'str',
        'night_mode': 'bool',
        'theme': 'str',
        'language': 'str',
        'show_plugins': 'str',
        'show_rawbg': 'str',
        'alarm_types': 'list[str]',
        'alarm_urgent_high': 'bool',
        'alarm_high': 'bool',
        'alarm_low': 'bool',
        'alarm_urgent_low': 'bool',
        'alarm_timeago_warn': 'bool',
        'alarm_timeago_warn_mins': 'float',
        'alarm_timeago_urgent': 'bool',
        'alarm_timeago_urgent_mins': 'float',
        'enable': 'list[str]',
        'thresholds': 'Threshold'
    }

    attribute_map = {
        'units': 'units',
        'time_format': 'timeFormat',
        'custom_title': 'customTitle',
        'night_mode': 'nightMode',
        'theme': 'theme',
        'language': 'language',
        'show_plugins': 'showPlugins',
        'show_rawbg': 'showRawbg',
        'alarm_types': 'alarmTypes',
        'alarm_urgent_high': 'alarmUrgentHigh',
        'alarm_high': 'alarmHigh',
        'alarm_low': 'alarmLow',
        'alarm_urgent_low': 'alarmUrgentLow',
        'alarm_timeago_warn': 'alarmTimeagoWarn',
        'alarm_timeago_warn_mins': 'alarmTimeagoWarnMins',
        'alarm_timeago_urgent': 'alarmTimeagoUrgent',
        'alarm_timeago_urgent_mins': 'alarmTimeagoUrgentMins',
        'enable': 'enable',
        'thresholds': 'thresholds'
    }

    def __init__(self, units=None, time_format=None, custom_title=None, night_mode=None, theme=None, language=None, show_plugins=None, show_rawbg=None, alarm_types=None, alarm_urgent_high=None, alarm_high=None, alarm_low=None, alarm_urgent_low=None, alarm_timeago_warn=None, alarm_timeago_warn_mins=None, alarm_timeago_urgent=None, alarm_timeago_urgent_mins=None, enable=None, thresholds=None):  # noqa: E501
        """Settings - a model defined in Swagger"""  # noqa: E501
        self._units = None
        self._time_format = None
        self._custom_title = None
        self._night_mode = None
        self._theme = None
        self._language = None
        self._show_plugins = None
        self._show_rawbg = None
        self._alarm_types = None
        self._alarm_urgent_high = None
        self._alarm_high = None
        self._alarm_low = None
        self._alarm_urgent_low = None
        self._alarm_timeago_warn = None
        self._alarm_timeago_warn_mins = None
        self._alarm_timeago_urgent = None
        self._alarm_timeago_urgent_mins = None
        self._enable = None
        self._thresholds = None
        self.discriminator = None
        if units is not None:
            self.units = units
        if time_format is not None:
            self.time_format = time_format
        if custom_title is not None:
            self.custom_title = custom_title
        if night_mode is not None:
            self.night_mode = night_mode
        if theme is not None:
            self.theme = theme
        if language is not None:
            self.language = language
        if show_plugins is not None:
            self.show_plugins = show_plugins
        if show_rawbg is not None:
            self.show_rawbg = show_rawbg
        if alarm_types is not None:
            self.alarm_types = alarm_types
        if alarm_urgent_high is not None:
            self.alarm_urgent_high = alarm_urgent_high
        if alarm_high is not None:
            self.alarm_high = alarm_high
        if alarm_low is not None:
            self.alarm_low = alarm_low
        if alarm_urgent_low is not None:
            self.alarm_urgent_low = alarm_urgent_low
        if alarm_timeago_warn is not None:
            self.alarm_timeago_warn = alarm_timeago_warn
        if alarm_timeago_warn_mins is not None:
            self.alarm_timeago_warn_mins = alarm_timeago_warn_mins
        if alarm_timeago_urgent is not None:
            self.alarm_timeago_urgent = alarm_timeago_urgent
        if alarm_timeago_urgent_mins is not None:
            self.alarm_timeago_urgent_mins = alarm_timeago_urgent_mins
        if enable is not None:
            self.enable = enable
        if thresholds is not None:
            self.thresholds = thresholds

    @property
    def units(self):
        """Gets the units of this Settings.  # noqa: E501

        Default units for glucose measurements across the server.  # noqa: E501

        :return: The units of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Settings.

        Default units for glucose measurements across the server.  # noqa: E501

        :param units: The units of this Settings.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def time_format(self):
        """Gets the time_format of this Settings.  # noqa: E501

        Default time format  # noqa: E501

        :return: The time_format of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this Settings.

        Default time format  # noqa: E501

        :param time_format: The time_format of this Settings.  # noqa: E501
        :type: str
        """
        allowed_values = ["12", "24"]  # noqa: E501
        if time_format not in allowed_values:
            raise ValueError(
                "Invalid value for `time_format` ({0}), must be one of {1}"  # noqa: E501
                .format(time_format, allowed_values)
            )

        self._time_format = time_format

    @property
    def custom_title(self):
        """Gets the custom_title of this Settings.  # noqa: E501

        Default custom title to be displayed system wide.  # noqa: E501

        :return: The custom_title of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._custom_title

    @custom_title.setter
    def custom_title(self, custom_title):
        """Sets the custom_title of this Settings.

        Default custom title to be displayed system wide.  # noqa: E501

        :param custom_title: The custom_title of this Settings.  # noqa: E501
        :type: str
        """

        self._custom_title = custom_title

    @property
    def night_mode(self):
        """Gets the night_mode of this Settings.  # noqa: E501

        Should Night mode be enabled by default?  # noqa: E501

        :return: The night_mode of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._night_mode

    @night_mode.setter
    def night_mode(self, night_mode):
        """Sets the night_mode of this Settings.

        Should Night mode be enabled by default?  # noqa: E501

        :param night_mode: The night_mode of this Settings.  # noqa: E501
        :type: bool
        """

        self._night_mode = night_mode

    @property
    def theme(self):
        """Gets the theme of this Settings.  # noqa: E501

        Default theme to be displayed system wide, `default`, `colors`, `colorblindfriendly`.  # noqa: E501

        :return: The theme of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this Settings.

        Default theme to be displayed system wide, `default`, `colors`, `colorblindfriendly`.  # noqa: E501

        :param theme: The theme of this Settings.  # noqa: E501
        :type: str
        """

        self._theme = theme

    @property
    def language(self):
        """Gets the language of this Settings.  # noqa: E501

        Default language code to be used system wide  # noqa: E501

        :return: The language of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Settings.

        Default language code to be used system wide  # noqa: E501

        :param language: The language of this Settings.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def show_plugins(self):
        """Gets the show_plugins of this Settings.  # noqa: E501

        Plugins that should be shown by default  # noqa: E501

        :return: The show_plugins of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._show_plugins

    @show_plugins.setter
    def show_plugins(self, show_plugins):
        """Sets the show_plugins of this Settings.

        Plugins that should be shown by default  # noqa: E501

        :param show_plugins: The show_plugins of this Settings.  # noqa: E501
        :type: str
        """

        self._show_plugins = show_plugins

    @property
    def show_rawbg(self):
        """Gets the show_rawbg of this Settings.  # noqa: E501

        If Raw BG is enabled when should it be shown? `never`, `always`, `noise`  # noqa: E501

        :return: The show_rawbg of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._show_rawbg

    @show_rawbg.setter
    def show_rawbg(self, show_rawbg):
        """Sets the show_rawbg of this Settings.

        If Raw BG is enabled when should it be shown? `never`, `always`, `noise`  # noqa: E501

        :param show_rawbg: The show_rawbg of this Settings.  # noqa: E501
        :type: str
        """

        self._show_rawbg = show_rawbg

    @property
    def alarm_types(self):
        """Gets the alarm_types of this Settings.  # noqa: E501

        Enabled alarm types, can be multiple  # noqa: E501

        :return: The alarm_types of this Settings.  # noqa: E501
        :rtype: list[str]
        """
        return self._alarm_types

    @alarm_types.setter
    def alarm_types(self, alarm_types):
        """Sets the alarm_types of this Settings.

        Enabled alarm types, can be multiple  # noqa: E501

        :param alarm_types: The alarm_types of this Settings.  # noqa: E501
        :type: list[str]
        """

        self._alarm_types = alarm_types

    @property
    def alarm_urgent_high(self):
        """Gets the alarm_urgent_high of this Settings.  # noqa: E501

        Enable/Disable client-side Urgent High alarms by default, for use with `simple` alarms.  # noqa: E501

        :return: The alarm_urgent_high of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._alarm_urgent_high

    @alarm_urgent_high.setter
    def alarm_urgent_high(self, alarm_urgent_high):
        """Sets the alarm_urgent_high of this Settings.

        Enable/Disable client-side Urgent High alarms by default, for use with `simple` alarms.  # noqa: E501

        :param alarm_urgent_high: The alarm_urgent_high of this Settings.  # noqa: E501
        :type: bool
        """

        self._alarm_urgent_high = alarm_urgent_high

    @property
    def alarm_high(self):
        """Gets the alarm_high of this Settings.  # noqa: E501

        Enable/Disable client-side High alarms by default, for use with `simple` alarms.  # noqa: E501

        :return: The alarm_high of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._alarm_high

    @alarm_high.setter
    def alarm_high(self, alarm_high):
        """Sets the alarm_high of this Settings.

        Enable/Disable client-side High alarms by default, for use with `simple` alarms.  # noqa: E501

        :param alarm_high: The alarm_high of this Settings.  # noqa: E501
        :type: bool
        """

        self._alarm_high = alarm_high

    @property
    def alarm_low(self):
        """Gets the alarm_low of this Settings.  # noqa: E501

        Enable/Disable client-side Low alarms by default, for use with `simple` alarms.  # noqa: E501

        :return: The alarm_low of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._alarm_low

    @alarm_low.setter
    def alarm_low(self, alarm_low):
        """Sets the alarm_low of this Settings.

        Enable/Disable client-side Low alarms by default, for use with `simple` alarms.  # noqa: E501

        :param alarm_low: The alarm_low of this Settings.  # noqa: E501
        :type: bool
        """

        self._alarm_low = alarm_low

    @property
    def alarm_urgent_low(self):
        """Gets the alarm_urgent_low of this Settings.  # noqa: E501

        Enable/Disable client-side Urgent Low alarms by default, for use with `simple` alarms.  # noqa: E501

        :return: The alarm_urgent_low of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._alarm_urgent_low

    @alarm_urgent_low.setter
    def alarm_urgent_low(self, alarm_urgent_low):
        """Sets the alarm_urgent_low of this Settings.

        Enable/Disable client-side Urgent Low alarms by default, for use with `simple` alarms.  # noqa: E501

        :param alarm_urgent_low: The alarm_urgent_low of this Settings.  # noqa: E501
        :type: bool
        """

        self._alarm_urgent_low = alarm_urgent_low

    @property
    def alarm_timeago_warn(self):
        """Gets the alarm_timeago_warn of this Settings.  # noqa: E501

        Enable/Disable client-side stale data alarms by default.  # noqa: E501

        :return: The alarm_timeago_warn of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._alarm_timeago_warn

    @alarm_timeago_warn.setter
    def alarm_timeago_warn(self, alarm_timeago_warn):
        """Sets the alarm_timeago_warn of this Settings.

        Enable/Disable client-side stale data alarms by default.  # noqa: E501

        :param alarm_timeago_warn: The alarm_timeago_warn of this Settings.  # noqa: E501
        :type: bool
        """

        self._alarm_timeago_warn = alarm_timeago_warn

    @property
    def alarm_timeago_warn_mins(self):
        """Gets the alarm_timeago_warn_mins of this Settings.  # noqa: E501

        Number of minutes before a stale data warning is generated.  # noqa: E501

        :return: The alarm_timeago_warn_mins of this Settings.  # noqa: E501
        :rtype: float
        """
        return self._alarm_timeago_warn_mins

    @alarm_timeago_warn_mins.setter
    def alarm_timeago_warn_mins(self, alarm_timeago_warn_mins):
        """Sets the alarm_timeago_warn_mins of this Settings.

        Number of minutes before a stale data warning is generated.  # noqa: E501

        :param alarm_timeago_warn_mins: The alarm_timeago_warn_mins of this Settings.  # noqa: E501
        :type: float
        """

        self._alarm_timeago_warn_mins = alarm_timeago_warn_mins

    @property
    def alarm_timeago_urgent(self):
        """Gets the alarm_timeago_urgent of this Settings.  # noqa: E501

        Enable/Disable client-side urgent stale data alarms by default.  # noqa: E501

        :return: The alarm_timeago_urgent of this Settings.  # noqa: E501
        :rtype: bool
        """
        return self._alarm_timeago_urgent

    @alarm_timeago_urgent.setter
    def alarm_timeago_urgent(self, alarm_timeago_urgent):
        """Sets the alarm_timeago_urgent of this Settings.

        Enable/Disable client-side urgent stale data alarms by default.  # noqa: E501

        :param alarm_timeago_urgent: The alarm_timeago_urgent of this Settings.  # noqa: E501
        :type: bool
        """

        self._alarm_timeago_urgent = alarm_timeago_urgent

    @property
    def alarm_timeago_urgent_mins(self):
        """Gets the alarm_timeago_urgent_mins of this Settings.  # noqa: E501

        Number of minutes before a stale data warning is generated.  # noqa: E501

        :return: The alarm_timeago_urgent_mins of this Settings.  # noqa: E501
        :rtype: float
        """
        return self._alarm_timeago_urgent_mins

    @alarm_timeago_urgent_mins.setter
    def alarm_timeago_urgent_mins(self, alarm_timeago_urgent_mins):
        """Sets the alarm_timeago_urgent_mins of this Settings.

        Number of minutes before a stale data warning is generated.  # noqa: E501

        :param alarm_timeago_urgent_mins: The alarm_timeago_urgent_mins of this Settings.  # noqa: E501
        :type: float
        """

        self._alarm_timeago_urgent_mins = alarm_timeago_urgent_mins

    @property
    def enable(self):
        """Gets the enable of this Settings.  # noqa: E501

        Enabled features  # noqa: E501

        :return: The enable of this Settings.  # noqa: E501
        :rtype: list[str]
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this Settings.

        Enabled features  # noqa: E501

        :param enable: The enable of this Settings.  # noqa: E501
        :type: list[str]
        """

        self._enable = enable

    @property
    def thresholds(self):
        """Gets the thresholds of this Settings.  # noqa: E501


        :return: The thresholds of this Settings.  # noqa: E501
        :rtype: Threshold
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this Settings.


        :param thresholds: The thresholds of this Settings.  # noqa: E501
        :type: Threshold
        """

        self._thresholds = thresholds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Settings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
