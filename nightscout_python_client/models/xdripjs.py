# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Xdripjs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'float',
        'state_string': 'str',
        'state_string_short': 'str',
        'tx_id': 'str',
        'tx_status': 'float',
        'tx_status_string': 'str',
        'tx_status_string_short': 'str',
        'tx_activation': 'float',
        'mode': 'str',
        'timestamp': 'float',
        'rssi': 'float',
        'unfiltered': 'float',
        'filtered': 'float',
        'noise': 'float',
        'noise_string': 'float',
        'slope': 'float',
        'intercept': 'float',
        'cal_type': 'str',
        'last_calibration_date': 'float',
        'session_start': 'float',
        'battery_timestamp': 'float',
        'voltagea': 'float',
        'voltageb': 'float',
        'temperature': 'float',
        'resistance': 'float'
    }

    attribute_map = {
        'state': 'state',
        'state_string': 'stateString',
        'state_string_short': 'stateStringShort',
        'tx_id': 'txId',
        'tx_status': 'txStatus',
        'tx_status_string': 'txStatusString',
        'tx_status_string_short': 'txStatusStringShort',
        'tx_activation': 'txActivation',
        'mode': 'mode',
        'timestamp': 'timestamp',
        'rssi': 'rssi',
        'unfiltered': 'unfiltered',
        'filtered': 'filtered',
        'noise': 'noise',
        'noise_string': 'noiseString',
        'slope': 'slope',
        'intercept': 'intercept',
        'cal_type': 'calType',
        'last_calibration_date': 'lastCalibrationDate',
        'session_start': 'sessionStart',
        'battery_timestamp': 'batteryTimestamp',
        'voltagea': 'voltagea',
        'voltageb': 'voltageb',
        'temperature': 'temperature',
        'resistance': 'resistance'
    }

    def __init__(self, state=None, state_string=None, state_string_short=None, tx_id=None, tx_status=None, tx_status_string=None, tx_status_string_short=None, tx_activation=None, mode=None, timestamp=None, rssi=None, unfiltered=None, filtered=None, noise=None, noise_string=None, slope=None, intercept=None, cal_type=None, last_calibration_date=None, session_start=None, battery_timestamp=None, voltagea=None, voltageb=None, temperature=None, resistance=None):  # noqa: E501
        """Xdripjs - a model defined in Swagger"""  # noqa: E501
        self._state = None
        self._state_string = None
        self._state_string_short = None
        self._tx_id = None
        self._tx_status = None
        self._tx_status_string = None
        self._tx_status_string_short = None
        self._tx_activation = None
        self._mode = None
        self._timestamp = None
        self._rssi = None
        self._unfiltered = None
        self._filtered = None
        self._noise = None
        self._noise_string = None
        self._slope = None
        self._intercept = None
        self._cal_type = None
        self._last_calibration_date = None
        self._session_start = None
        self._battery_timestamp = None
        self._voltagea = None
        self._voltageb = None
        self._temperature = None
        self._resistance = None
        self.discriminator = None
        if state is not None:
            self.state = state
        if state_string is not None:
            self.state_string = state_string
        if state_string_short is not None:
            self.state_string_short = state_string_short
        if tx_id is not None:
            self.tx_id = tx_id
        if tx_status is not None:
            self.tx_status = tx_status
        if tx_status_string is not None:
            self.tx_status_string = tx_status_string
        if tx_status_string_short is not None:
            self.tx_status_string_short = tx_status_string_short
        if tx_activation is not None:
            self.tx_activation = tx_activation
        if mode is not None:
            self.mode = mode
        if timestamp is not None:
            self.timestamp = timestamp
        if rssi is not None:
            self.rssi = rssi
        if unfiltered is not None:
            self.unfiltered = unfiltered
        if filtered is not None:
            self.filtered = filtered
        if noise is not None:
            self.noise = noise
        if noise_string is not None:
            self.noise_string = noise_string
        if slope is not None:
            self.slope = slope
        if intercept is not None:
            self.intercept = intercept
        if cal_type is not None:
            self.cal_type = cal_type
        if last_calibration_date is not None:
            self.last_calibration_date = last_calibration_date
        if session_start is not None:
            self.session_start = session_start
        if battery_timestamp is not None:
            self.battery_timestamp = battery_timestamp
        if voltagea is not None:
            self.voltagea = voltagea
        if voltageb is not None:
            self.voltageb = voltageb
        if temperature is not None:
            self.temperature = temperature
        if resistance is not None:
            self.resistance = resistance

    @property
    def state(self):
        """Gets the state of this Xdripjs.  # noqa: E501

        CGM Sensor Session State Code  # noqa: E501

        :return: The state of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Xdripjs.

        CGM Sensor Session State Code  # noqa: E501

        :param state: The state of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._state = state

    @property
    def state_string(self):
        """Gets the state_string of this Xdripjs.  # noqa: E501

        CGM Sensor Session State String  # noqa: E501

        :return: The state_string of this Xdripjs.  # noqa: E501
        :rtype: str
        """
        return self._state_string

    @state_string.setter
    def state_string(self, state_string):
        """Sets the state_string of this Xdripjs.

        CGM Sensor Session State String  # noqa: E501

        :param state_string: The state_string of this Xdripjs.  # noqa: E501
        :type: str
        """

        self._state_string = state_string

    @property
    def state_string_short(self):
        """Gets the state_string_short of this Xdripjs.  # noqa: E501

        CGM Sensor Session State Short String  # noqa: E501

        :return: The state_string_short of this Xdripjs.  # noqa: E501
        :rtype: str
        """
        return self._state_string_short

    @state_string_short.setter
    def state_string_short(self, state_string_short):
        """Sets the state_string_short of this Xdripjs.

        CGM Sensor Session State Short String  # noqa: E501

        :param state_string_short: The state_string_short of this Xdripjs.  # noqa: E501
        :type: str
        """

        self._state_string_short = state_string_short

    @property
    def tx_id(self):
        """Gets the tx_id of this Xdripjs.  # noqa: E501

        CGM Transmitter ID  # noqa: E501

        :return: The tx_id of this Xdripjs.  # noqa: E501
        :rtype: str
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this Xdripjs.

        CGM Transmitter ID  # noqa: E501

        :param tx_id: The tx_id of this Xdripjs.  # noqa: E501
        :type: str
        """

        self._tx_id = tx_id

    @property
    def tx_status(self):
        """Gets the tx_status of this Xdripjs.  # noqa: E501

        CGM Transmitter Status  # noqa: E501

        :return: The tx_status of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._tx_status

    @tx_status.setter
    def tx_status(self, tx_status):
        """Sets the tx_status of this Xdripjs.

        CGM Transmitter Status  # noqa: E501

        :param tx_status: The tx_status of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._tx_status = tx_status

    @property
    def tx_status_string(self):
        """Gets the tx_status_string of this Xdripjs.  # noqa: E501

        CGM Transmitter Status String  # noqa: E501

        :return: The tx_status_string of this Xdripjs.  # noqa: E501
        :rtype: str
        """
        return self._tx_status_string

    @tx_status_string.setter
    def tx_status_string(self, tx_status_string):
        """Sets the tx_status_string of this Xdripjs.

        CGM Transmitter Status String  # noqa: E501

        :param tx_status_string: The tx_status_string of this Xdripjs.  # noqa: E501
        :type: str
        """

        self._tx_status_string = tx_status_string

    @property
    def tx_status_string_short(self):
        """Gets the tx_status_string_short of this Xdripjs.  # noqa: E501

        CGM Transmitter Status Short String  # noqa: E501

        :return: The tx_status_string_short of this Xdripjs.  # noqa: E501
        :rtype: str
        """
        return self._tx_status_string_short

    @tx_status_string_short.setter
    def tx_status_string_short(self, tx_status_string_short):
        """Sets the tx_status_string_short of this Xdripjs.

        CGM Transmitter Status Short String  # noqa: E501

        :param tx_status_string_short: The tx_status_string_short of this Xdripjs.  # noqa: E501
        :type: str
        """

        self._tx_status_string_short = tx_status_string_short

    @property
    def tx_activation(self):
        """Gets the tx_activation of this Xdripjs.  # noqa: E501

        CGM Transmitter Activation Milliseconds After Epoch  # noqa: E501

        :return: The tx_activation of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._tx_activation

    @tx_activation.setter
    def tx_activation(self, tx_activation):
        """Sets the tx_activation of this Xdripjs.

        CGM Transmitter Activation Milliseconds After Epoch  # noqa: E501

        :param tx_activation: The tx_activation of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._tx_activation = tx_activation

    @property
    def mode(self):
        """Gets the mode of this Xdripjs.  # noqa: E501

        Mode xdrip-js Application Operationg: expired, not expired, etc.  # noqa: E501

        :return: The mode of this Xdripjs.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Xdripjs.

        Mode xdrip-js Application Operationg: expired, not expired, etc.  # noqa: E501

        :param mode: The mode of this Xdripjs.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def timestamp(self):
        """Gets the timestamp of this Xdripjs.  # noqa: E501

        Last Update Milliseconds After Epoch  # noqa: E501

        :return: The timestamp of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Xdripjs.

        Last Update Milliseconds After Epoch  # noqa: E501

        :param timestamp: The timestamp of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._timestamp = timestamp

    @property
    def rssi(self):
        """Gets the rssi of this Xdripjs.  # noqa: E501

        Receive Signal Strength of Transmitter  # noqa: E501

        :return: The rssi of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this Xdripjs.

        Receive Signal Strength of Transmitter  # noqa: E501

        :param rssi: The rssi of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._rssi = rssi

    @property
    def unfiltered(self):
        """Gets the unfiltered of this Xdripjs.  # noqa: E501

        Most Recent Raw Unfiltered Glucose  # noqa: E501

        :return: The unfiltered of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._unfiltered

    @unfiltered.setter
    def unfiltered(self, unfiltered):
        """Sets the unfiltered of this Xdripjs.

        Most Recent Raw Unfiltered Glucose  # noqa: E501

        :param unfiltered: The unfiltered of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._unfiltered = unfiltered

    @property
    def filtered(self):
        """Gets the filtered of this Xdripjs.  # noqa: E501

        Most Recent Raw Filtered Glucose  # noqa: E501

        :return: The filtered of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._filtered

    @filtered.setter
    def filtered(self, filtered):
        """Sets the filtered of this Xdripjs.

        Most Recent Raw Filtered Glucose  # noqa: E501

        :param filtered: The filtered of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._filtered = filtered

    @property
    def noise(self):
        """Gets the noise of this Xdripjs.  # noqa: E501

        Calculated Noise Value - 1=Clean, 2=Light, 3=Medium, 4=Heavy  # noqa: E501

        :return: The noise of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._noise

    @noise.setter
    def noise(self, noise):
        """Sets the noise of this Xdripjs.

        Calculated Noise Value - 1=Clean, 2=Light, 3=Medium, 4=Heavy  # noqa: E501

        :param noise: The noise of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._noise = noise

    @property
    def noise_string(self):
        """Gets the noise_string of this Xdripjs.  # noqa: E501

        Noise Value String  # noqa: E501

        :return: The noise_string of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._noise_string

    @noise_string.setter
    def noise_string(self, noise_string):
        """Sets the noise_string of this Xdripjs.

        Noise Value String  # noqa: E501

        :param noise_string: The noise_string of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._noise_string = noise_string

    @property
    def slope(self):
        """Gets the slope of this Xdripjs.  # noqa: E501

        Calibration Slope Value  # noqa: E501

        :return: The slope of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._slope

    @slope.setter
    def slope(self, slope):
        """Sets the slope of this Xdripjs.

        Calibration Slope Value  # noqa: E501

        :param slope: The slope of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._slope = slope

    @property
    def intercept(self):
        """Gets the intercept of this Xdripjs.  # noqa: E501

        Calibration Intercept Value  # noqa: E501

        :return: The intercept of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._intercept

    @intercept.setter
    def intercept(self, intercept):
        """Sets the intercept of this Xdripjs.

        Calibration Intercept Value  # noqa: E501

        :param intercept: The intercept of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._intercept = intercept

    @property
    def cal_type(self):
        """Gets the cal_type of this Xdripjs.  # noqa: E501

        Algorithm Used to Calculate Calibration Values  # noqa: E501

        :return: The cal_type of this Xdripjs.  # noqa: E501
        :rtype: str
        """
        return self._cal_type

    @cal_type.setter
    def cal_type(self, cal_type):
        """Sets the cal_type of this Xdripjs.

        Algorithm Used to Calculate Calibration Values  # noqa: E501

        :param cal_type: The cal_type of this Xdripjs.  # noqa: E501
        :type: str
        """

        self._cal_type = cal_type

    @property
    def last_calibration_date(self):
        """Gets the last_calibration_date of this Xdripjs.  # noqa: E501

        Most Recent Calibration Milliseconds After Epoch  # noqa: E501

        :return: The last_calibration_date of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._last_calibration_date

    @last_calibration_date.setter
    def last_calibration_date(self, last_calibration_date):
        """Sets the last_calibration_date of this Xdripjs.

        Most Recent Calibration Milliseconds After Epoch  # noqa: E501

        :param last_calibration_date: The last_calibration_date of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._last_calibration_date = last_calibration_date

    @property
    def session_start(self):
        """Gets the session_start of this Xdripjs.  # noqa: E501

        Sensor Session Start Milliseconds After Epoch  # noqa: E501

        :return: The session_start of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._session_start

    @session_start.setter
    def session_start(self, session_start):
        """Sets the session_start of this Xdripjs.

        Sensor Session Start Milliseconds After Epoch  # noqa: E501

        :param session_start: The session_start of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._session_start = session_start

    @property
    def battery_timestamp(self):
        """Gets the battery_timestamp of this Xdripjs.  # noqa: E501

        Most Recent Batter Status Read Milliseconds After Epoch  # noqa: E501

        :return: The battery_timestamp of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._battery_timestamp

    @battery_timestamp.setter
    def battery_timestamp(self, battery_timestamp):
        """Sets the battery_timestamp of this Xdripjs.

        Most Recent Batter Status Read Milliseconds After Epoch  # noqa: E501

        :param battery_timestamp: The battery_timestamp of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._battery_timestamp = battery_timestamp

    @property
    def voltagea(self):
        """Gets the voltagea of this Xdripjs.  # noqa: E501

        Voltage of Battery A  # noqa: E501

        :return: The voltagea of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._voltagea

    @voltagea.setter
    def voltagea(self, voltagea):
        """Sets the voltagea of this Xdripjs.

        Voltage of Battery A  # noqa: E501

        :param voltagea: The voltagea of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._voltagea = voltagea

    @property
    def voltageb(self):
        """Gets the voltageb of this Xdripjs.  # noqa: E501

        Voltage of Battery B  # noqa: E501

        :return: The voltageb of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._voltageb

    @voltageb.setter
    def voltageb(self, voltageb):
        """Sets the voltageb of this Xdripjs.

        Voltage of Battery B  # noqa: E501

        :param voltageb: The voltageb of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._voltageb = voltageb

    @property
    def temperature(self):
        """Gets the temperature of this Xdripjs.  # noqa: E501

        Transmitter Temperature  # noqa: E501

        :return: The temperature of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this Xdripjs.

        Transmitter Temperature  # noqa: E501

        :param temperature: The temperature of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def resistance(self):
        """Gets the resistance of this Xdripjs.  # noqa: E501

        Sensor Resistance  # noqa: E501

        :return: The resistance of this Xdripjs.  # noqa: E501
        :rtype: float
        """
        return self._resistance

    @resistance.setter
    def resistance(self, resistance):
        """Sets the resistance of this Xdripjs.

        Sensor Resistance  # noqa: E501

        :param resistance: The resistance of this Xdripjs.  # noqa: E501
        :type: float
        """

        self._resistance = resistance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Xdripjs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Xdripjs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
