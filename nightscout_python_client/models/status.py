# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_enabled': 'bool',
        'careportal_enabled': 'bool',
        'head': 'str',
        'name': 'str',
        'version': 'str',
        'settings': 'Settings',
        'extended_settings': 'ExtendedSettings'
    }

    attribute_map = {
        'api_enabled': 'apiEnabled',
        'careportal_enabled': 'careportalEnabled',
        'head': 'head',
        'name': 'name',
        'version': 'version',
        'settings': 'settings',
        'extended_settings': 'extendedSettings'
    }

    def __init__(self, api_enabled=None, careportal_enabled=None, head=None, name=None, version=None, settings=None, extended_settings=None):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501
        self._api_enabled = None
        self._careportal_enabled = None
        self._head = None
        self._name = None
        self._version = None
        self._settings = None
        self._extended_settings = None
        self.discriminator = None
        if api_enabled is not None:
            self.api_enabled = api_enabled
        if careportal_enabled is not None:
            self.careportal_enabled = careportal_enabled
        if head is not None:
            self.head = head
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if settings is not None:
            self.settings = settings
        if extended_settings is not None:
            self.extended_settings = extended_settings

    @property
    def api_enabled(self):
        """Gets the api_enabled of this Status.  # noqa: E501

        Whether or not the REST API is enabled.  # noqa: E501

        :return: The api_enabled of this Status.  # noqa: E501
        :rtype: bool
        """
        return self._api_enabled

    @api_enabled.setter
    def api_enabled(self, api_enabled):
        """Sets the api_enabled of this Status.

        Whether or not the REST API is enabled.  # noqa: E501

        :param api_enabled: The api_enabled of this Status.  # noqa: E501
        :type: bool
        """

        self._api_enabled = api_enabled

    @property
    def careportal_enabled(self):
        """Gets the careportal_enabled of this Status.  # noqa: E501

        Whether or not the careportal is enabled in the API.  # noqa: E501

        :return: The careportal_enabled of this Status.  # noqa: E501
        :rtype: bool
        """
        return self._careportal_enabled

    @careportal_enabled.setter
    def careportal_enabled(self, careportal_enabled):
        """Sets the careportal_enabled of this Status.

        Whether or not the careportal is enabled in the API.  # noqa: E501

        :param careportal_enabled: The careportal_enabled of this Status.  # noqa: E501
        :type: bool
        """

        self._careportal_enabled = careportal_enabled

    @property
    def head(self):
        """Gets the head of this Status.  # noqa: E501

        The git identifier for the running instance of the app.  # noqa: E501

        :return: The head of this Status.  # noqa: E501
        :rtype: str
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this Status.

        The git identifier for the running instance of the app.  # noqa: E501

        :param head: The head of this Status.  # noqa: E501
        :type: str
        """

        self._head = head

    @property
    def name(self):
        """Gets the name of this Status.  # noqa: E501

        Nightscout (static)  # noqa: E501

        :return: The name of this Status.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Status.

        Nightscout (static)  # noqa: E501

        :param name: The name of this Status.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this Status.  # noqa: E501

        The version label of the app.  # noqa: E501

        :return: The version of this Status.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Status.

        The version label of the app.  # noqa: E501

        :param version: The version of this Status.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def settings(self):
        """Gets the settings of this Status.  # noqa: E501


        :return: The settings of this Status.  # noqa: E501
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Status.


        :param settings: The settings of this Status.  # noqa: E501
        :type: Settings
        """

        self._settings = settings

    @property
    def extended_settings(self):
        """Gets the extended_settings of this Status.  # noqa: E501


        :return: The extended_settings of this Status.  # noqa: E501
        :rtype: ExtendedSettings
        """
        return self._extended_settings

    @extended_settings.setter
    def extended_settings(self, extended_settings):
        """Sets the extended_settings of this Status.


        :param extended_settings: The extended_settings of this Status.  # noqa: E501
        :type: ExtendedSettings
        """

        self._extended_settings = extended_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
