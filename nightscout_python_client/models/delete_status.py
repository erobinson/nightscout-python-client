# coding: utf-8

"""
    Nightscout API

    Own your DData with the Nightscout API  # noqa: E501

    OpenAPI spec version: 14.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeleteStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'n': 'int',
        'optime': 'Optime',
        'election_id': 'str',
        'ok': 'int',
        'operation_time': 'str',
        'cluster_time': 'str'
    }

    attribute_map = {
        'n': 'n',
        'optime': 'optime',
        'election_id': 'electionId',
        'ok': 'ok',
        'operation_time': 'operationTime',
        'cluster_time': '$clusterTime'
    }

    def __init__(self, n=None, optime=None, election_id=None, ok=None, operation_time=None, cluster_time=None):  # noqa: E501
        """DeleteStatus - a model defined in Swagger"""  # noqa: E501
        self._n = None
        self._optime = None
        self._election_id = None
        self._ok = None
        self._operation_time = None
        self._cluster_time = None
        self.discriminator = None
        if n is not None:
            self.n = n
        if optime is not None:
            self.optime = optime
        if election_id is not None:
            self.election_id = election_id
        if ok is not None:
            self.ok = ok
        if operation_time is not None:
            self.operation_time = operation_time
        if cluster_time is not None:
            self.cluster_time = cluster_time

    @property
    def n(self):
        """Gets the n of this DeleteStatus.  # noqa: E501

        Number of records deleted  # noqa: E501

        :return: The n of this DeleteStatus.  # noqa: E501
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this DeleteStatus.

        Number of records deleted  # noqa: E501

        :param n: The n of this DeleteStatus.  # noqa: E501
        :type: int
        """

        self._n = n

    @property
    def optime(self):
        """Gets the optime of this DeleteStatus.  # noqa: E501


        :return: The optime of this DeleteStatus.  # noqa: E501
        :rtype: Optime
        """
        return self._optime

    @optime.setter
    def optime(self, optime):
        """Sets the optime of this DeleteStatus.


        :param optime: The optime of this DeleteStatus.  # noqa: E501
        :type: Optime
        """

        self._optime = optime

    @property
    def election_id(self):
        """Gets the election_id of this DeleteStatus.  # noqa: E501

        Election id of operation  # noqa: E501

        :return: The election_id of this DeleteStatus.  # noqa: E501
        :rtype: str
        """
        return self._election_id

    @election_id.setter
    def election_id(self, election_id):
        """Sets the election_id of this DeleteStatus.

        Election id of operation  # noqa: E501

        :param election_id: The election_id of this DeleteStatus.  # noqa: E501
        :type: str
        """

        self._election_id = election_id

    @property
    def ok(self):
        """Gets the ok of this DeleteStatus.  # noqa: E501

        Status of whether delete was successful  # noqa: E501

        :return: The ok of this DeleteStatus.  # noqa: E501
        :rtype: int
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this DeleteStatus.

        Status of whether delete was successful  # noqa: E501

        :param ok: The ok of this DeleteStatus.  # noqa: E501
        :type: int
        """

        self._ok = ok

    @property
    def operation_time(self):
        """Gets the operation_time of this DeleteStatus.  # noqa: E501

        Time delete operation was executed  # noqa: E501

        :return: The operation_time of this DeleteStatus.  # noqa: E501
        :rtype: str
        """
        return self._operation_time

    @operation_time.setter
    def operation_time(self, operation_time):
        """Sets the operation_time of this DeleteStatus.

        Time delete operation was executed  # noqa: E501

        :param operation_time: The operation_time of this DeleteStatus.  # noqa: E501
        :type: str
        """

        self._operation_time = operation_time

    @property
    def cluster_time(self):
        """Gets the cluster_time of this DeleteStatus.  # noqa: E501

        Information about execution time in cluster environment  # noqa: E501

        :return: The cluster_time of this DeleteStatus.  # noqa: E501
        :rtype: str
        """
        return self._cluster_time

    @cluster_time.setter
    def cluster_time(self, cluster_time):
        """Sets the cluster_time of this DeleteStatus.

        Information about execution time in cluster environment  # noqa: E501

        :param cluster_time: The cluster_time of this DeleteStatus.  # noqa: E501
        :type: str
        """

        self._cluster_time = cluster_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeleteStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeleteStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
